
    printf("%d\n", str_to_int("123"));
---------------------------------------------------------

    printf("%d\n", sizeof(SDS));
---------------------------------------------------------

    int matrix[][4] = {
            1,2,8,9,
            2,4,9,12,
            4,7,10,13,
            6,8,11,15
    };

    int *matrix_p = matrix[0];

    int i = find_in_matrix2(matrix[0], 4, 4, 11);
    printf("%d\n", i);
---------------------------------------------------------


    char *str1 = "hello";
    char *str2 = "hello";
    char str3[] = "hello";
    char str4[] = "hello";
    printf("%d\n", str1 == str2);
    printf("%d\n", str3 == str4);
---------------------------------------------------------

    char string[40];
    strcpy(string, "i love you");
    replace_blank(string, 40);
    printf("%s\n", string);
---------------------------------------------------------

    int array1[] = {1, 3, 5, 9, 0,0,0,0,0,0};
    int array2[] = {};
    int *tmp = merge_two_sorted_array(array1, 4, array2, 0, 10);
    int i = 0;
    for(; i < 8; i++)
        printf("%d\n", *(tmp+i));
---------------------------------------------------------


    node *node1;
    node1 = malloc(sizeof(struct node));
    node1->value = 1;
    printf("%d\n", node1->value);
    printf("%d\n", sizeof(node1->next));
    printf("%d\n", sizeof(node1));

    node *head;
    head = malloc(sizeof(node));
    head->value = -1;
    head->next = NULL;
    head = add_to_tail(NULL, 1);
    show_list(head);
    head = add_to_tail(head, 2);
    head = add_to_tail(head, 5);
    head = add_to_tail(head, 2);
    head = add_to_tail(head, 5);
    show_list(head);

    print_list_reversingly(head);
//    print_list_reversingly_recursively(head);

    remove_node(head, 2);
    show_list(head);
---------------------------------------------------------


//    StackL *stack;
//    stack = init_stackl();
//    push_stackl(stack, 1);
//    push_stackl(stack, 2);
//
//    ElemType *e = malloc(sizeof(ElemType));
//    pop_stackl(stack, e);
//    printf("%d\n", *e);
//
//    push_stackl(stack, 5);
//    pop_stackl(stack, e);
//    printf("%d\n", *e);
//    push_stackl(stack, 6);
//    stackl_print(stack);

//    ArrayStack *stacka;
//    stacka = init_array_stack();
//    push_array_stack(stacka, 1);
//    push_array_stack(stacka, 2);
//    push_array_stack(stacka, 3);
//
//    ElemType *e = malloc(sizeof(ElemType));
//    pop_array_stack(stacka, e);
//    printf("%d\n", *e);
//    array_stack_print(stacka);
---------------------------------------------------------